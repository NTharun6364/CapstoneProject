{"name": "test_place_order_flow", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.NoAlertPresentException: Message: no such alert\n  (Session info: chrome=139.0.7258.160)\n  (Driver info: chromedriver=139.0.7258.154 (9e0d6b2b47ffb17007b713429c9a302f9e43847f-refs/branch-heads/7258@{#2926}),platform=Linux 5.16.12-200.fc35.x86_64 x86_64)", "trace": "driver = <selenium.webdriver.remote.webdriver.WebDriver (session=\"de7d683e3b61b5e21ac8b30ae025d343dadbdcf4\")>\n\n    @allure.feature('Place Order')\n    def test_place_order_flow(driver):\n        # load test user data\n        data_file = os.path.join(os.path.dirname(__file__), 'users.csv')\n        with open(data_file, newline='') as f:\n            reader = csv.DictReader(f)\n            users = list(reader)\n        user = users[0]\n    \n        home = HomePage(driver)\n        home.open_first_product()\n    \n        product = ProductPage(driver)\n>       alert_text = product.add_to_cart_and_accept_alert()\n                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\ntests\\test_place_order.py:22: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npages\\product_page.py:15: in add_to_cart_and_accept_alert\n    alert = self.driver.switch_to.alert\n            ^^^^^^^^^^^^^^^^^^^^^^^^^^^\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\switch_to.py:50: in alert\n    _ = alert.text\n        ^^^^^^^^^^\nvenv\\Lib\\site-packages\\selenium\\webdriver\\common\\alert.py:58: in text\n    return self.driver.execute(Command.W3C_GET_ALERT_TEXT)[\"value\"]\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:458: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000016B0E6AB050>\nresponse = {'status': 500, 'value': '{\"status\":27,\"value\":{\"message\":\"no such alert\\\\n  (Session info: chrome=139.0.7258.160)\\\\n ...64)\",\"sessionId\":\"de7d683e3b61b5e21ac8b30ae025d343dadbdcf4\"}},\"sessionId\":\"de7d683e3b61b5e21ac8b30ae025d343dadbdcf4\"}'}\n\n    def check_response(self, response: dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        Args:\n            response: The JSON response from the WebDriver server as a dictionary\n                object.\n    \n        Raises:\n            WebDriverException: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                try:\n                    value = json.loads(value_json)\n                    if isinstance(value, dict):\n                        if len(value) == 1:\n                            value = value[\"value\"]\n                        status = value.get(\"error\", None)\n                        if not status:\n                            status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                            message = value.get(\"value\") or value.get(\"message\")\n                            if not isinstance(message, str):\n                                value = message\n                                message = message.get(\"message\") if isinstance(message, dict) else None\n                        else:\n                            message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoAlertPresentException: Message: no such alert\nE         (Session info: chrome=139.0.7258.160)\nE         (Driver info: chromedriver=139.0.7258.154 (9e0d6b2b47ffb17007b713429c9a302f9e43847f-refs/branch-heads/7258@{#2926}),platform=Linux 5.16.12-200.fc35.x86_64 x86_64)\n\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:233: NoAlertPresentException"}, "attachments": [{"name": "log", "source": "5c5097d1-76a9-4696-bf53-0e93319be0cc-attachment.txt", "type": "text/plain"}, {"name": "stderr", "source": "816adeff-45b8-49b0-84c1-de0f16c98572-attachment.txt", "type": "text/plain"}], "start": 1761728078752, "stop": 1761728085436, "uuid": "ffe30e2b-2021-4e81-826d-dd3602d41989", "historyId": "4f74172bf10135fb4afff49bfb34c0c6", "testCaseId": "4f74172bf10135fb4afff49bfb34c0c6", "fullName": "tests.test_place_order#test_place_order_flow", "labels": [{"name": "feature", "value": "Place Order"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_place_order"}, {"name": "host", "value": "ASCENDI-N7SB05U"}, {"name": "thread", "value": "7624-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_place_order"}], "titlePath": ["tests", "test_place_order.py"]}